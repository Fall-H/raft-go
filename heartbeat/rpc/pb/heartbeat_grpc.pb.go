// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: heartbeat/rpc/proto/heartbeat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Heartbeat_PingRpc_FullMethodName = "/pb.heartbeat/PingRpc"
	Heartbeat_PongRpc_FullMethodName = "/pb.heartbeat/PongRpc"
)

// HeartbeatClient is the client API for Heartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartbeatClient interface {
	PingRpc(ctx context.Context, in *PingRpcModel, opts ...grpc.CallOption) (*PongRpcModel, error)
	PongRpc(ctx context.Context, in *PongRpcModel, opts ...grpc.CallOption) (*PingRpcModel, error)
}

type heartbeatClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartbeatClient(cc grpc.ClientConnInterface) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) PingRpc(ctx context.Context, in *PingRpcModel, opts ...grpc.CallOption) (*PongRpcModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PongRpcModel)
	err := c.cc.Invoke(ctx, Heartbeat_PingRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heartbeatClient) PongRpc(ctx context.Context, in *PongRpcModel, opts ...grpc.CallOption) (*PingRpcModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingRpcModel)
	err := c.cc.Invoke(ctx, Heartbeat_PongRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatServer is the server API for Heartbeat service.
// All implementations must embed UnimplementedHeartbeatServer
// for forward compatibility.
type HeartbeatServer interface {
	PingRpc(context.Context, *PingRpcModel) (*PongRpcModel, error)
	PongRpc(context.Context, *PongRpcModel) (*PingRpcModel, error)
	mustEmbedUnimplementedHeartbeatServer()
}

// UnimplementedHeartbeatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHeartbeatServer struct{}

func (UnimplementedHeartbeatServer) PingRpc(context.Context, *PingRpcModel) (*PongRpcModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingRpc not implemented")
}
func (UnimplementedHeartbeatServer) PongRpc(context.Context, *PongRpcModel) (*PingRpcModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PongRpc not implemented")
}
func (UnimplementedHeartbeatServer) mustEmbedUnimplementedHeartbeatServer() {}
func (UnimplementedHeartbeatServer) testEmbeddedByValue()                   {}

// UnsafeHeartbeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartbeatServer will
// result in compilation errors.
type UnsafeHeartbeatServer interface {
	mustEmbedUnimplementedHeartbeatServer()
}

func RegisterHeartbeatServer(s grpc.ServiceRegistrar, srv HeartbeatServer) {
	// If the following call pancis, it indicates UnimplementedHeartbeatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Heartbeat_ServiceDesc, srv)
}

func _Heartbeat_PingRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRpcModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).PingRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Heartbeat_PingRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).PingRpc(ctx, req.(*PingRpcModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heartbeat_PongRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongRpcModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).PongRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Heartbeat_PongRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).PongRpc(ctx, req.(*PongRpcModel))
	}
	return interceptor(ctx, in, info, handler)
}

// Heartbeat_ServiceDesc is the grpc.ServiceDesc for Heartbeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Heartbeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingRpc",
			Handler:    _Heartbeat_PingRpc_Handler,
		},
		{
			MethodName: "PongRpc",
			Handler:    _Heartbeat_PongRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat/rpc/proto/heartbeat.proto",
}
